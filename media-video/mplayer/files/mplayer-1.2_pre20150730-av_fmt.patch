r37443 | reimar | 2015-08-01 09:44:07 +0200 (Sat, 01 Aug 2015) | 1 line

Add AV_ prefix to all PIX_FMT constants used.


Index: libvo/mga_template.c
===================================================================
--- libvo/mga_template.c	(revision 37442)
+++ libvo/mga_template.c	(revision 37443)
@@ -74,7 +74,7 @@
 	int dst_stride[4] = { bespitch, bespitch };
 	uint8_t *dst[4];
 
-	av_image_fill_pointers(dst, PIX_FMT_NV12, mga_vid_config.src_height,
+	av_image_fill_pointers(dst, AV_PIX_FMT_NV12, mga_vid_config.src_height,
 	                       vid_data, dst_stride);
 
 	sws_scale(sws_ctx, image, stride, y, height, dst, dst_stride);
@@ -419,8 +419,8 @@
 		}
 	}
 	if (mga_vid_config.card_type == MGA_G200) {
-		sws_ctx = sws_getContext(width, height, PIX_FMT_YUV420P,
-		                         width, height, PIX_FMT_NV12,
+		sws_ctx = sws_getContext(width, height, AV_PIX_FMT_YUV420P,
+		                         width, height, AV_PIX_FMT_NV12,
 		                         SWS_BILINEAR, NULL, NULL, NULL);
 		if (!sws_ctx) {
 			mp_msg(MSGT_VO, MSGL_FATAL,
Index: libmpcodecs/vf_lavfi.c
===================================================================
--- libmpcodecs/vf_lavfi.c	(revision 37442)
+++ libmpcodecs/vf_lavfi.c	(revision 37443)
@@ -107,7 +107,7 @@
         if (vf->next->query_format(vf->next, ifmt) > 0)
             sup[nsup++] = all->formats[i];
     }
-    sup[nsup++] = PIX_FMT_NONE;
+    sup[nsup++] = AV_PIX_FMT_NONE;
     avfilter_set_common_pixel_formats(ctx, avfilter_make_format_list(sup));
     av_free(sup);
     return 0;
@@ -186,7 +186,7 @@
 static int mpsrc_query_formats(AVFilterContext *ctx)
 {
     struct mpsrc_priv *c = ctx->priv;
-    enum AVPixelFormat pix_fmts[] = { c->vf->priv->in_pixfmt, PIX_FMT_NONE };
+    enum AVPixelFormat pix_fmts[] = { c->vf->priv->in_pixfmt, AV_PIX_FMT_NONE };
     avfilter_set_common_pixel_formats(ctx, avfilter_make_format_list(pix_fmts));
     return 0;
 }
Index: libmpcodecs/vd_ffmpeg.c
===================================================================
--- libmpcodecs/vd_ffmpeg.c	(revision 37442)
+++ libmpcodecs/vd_ffmpeg.c	(revision 37443)
@@ -191,7 +191,7 @@
 #if CONFIG_XVMC
         case IMGFMT_XVMC_IDCT_MPEG2:
         case IMGFMT_XVMC_MOCO_MPEG2:
-            if(avctx->pix_fmt==PIX_FMT_XVMC_MPEG2_IDCT) return CONTROL_TRUE;
+            if(avctx->pix_fmt == AV_PIX_FMT_XVMC_MPEG2_IDCT) return CONTROL_TRUE;
 #endif
         }
         return CONTROL_FALSE;
@@ -289,7 +289,7 @@
     sh_video_t *sh     = avctx->opaque;
     vd_ffmpeg_ctx *ctx = sh->context;
     int imgfmt;
-    if (fmt == PIX_FMT_NONE)
+    if (fmt == AV_PIX_FMT_NONE)
         return;
     ctx->use_hwaccel = fmt == AV_PIX_FMT_VDPAU;
     imgfmt = pixfmt2imgfmt2(fmt, avctx->codec_id);
@@ -1127,7 +1127,7 @@
         for (i = 0; fmt[i] != AV_PIX_FMT_NONE; i++)
             if (fmt[i] == ctx->pix_fmt) return ctx->pix_fmt;
 
-    for(i=0;fmt[i]!=PIX_FMT_NONE;i++){
+    for(i=0;fmt[i]!=AV_PIX_FMT_NONE;i++){
         // it is incorrect of FFmpeg to even offer these, filter them out
         if(!(avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU) &&
            (fmt[i] == AV_PIX_FMT_VDPAU_MPEG1 || fmt[i] == AV_PIX_FMT_VDPAU_MPEG2))
@@ -1140,7 +1140,7 @@
         }
     }
     selected_format = fmt[i];
-    if (selected_format == PIX_FMT_NONE) {
+    if (selected_format == AV_PIX_FMT_NONE) {
         selected_format = avcodec_default_get_format(avctx, fmt);
         update_configuration(sh, selected_format, 1);
     }
Index: libmpcodecs/vf_screenshot.c
===================================================================
--- libmpcodecs/vf_screenshot.c	(revision 37442)
+++ libmpcodecs/vf_screenshot.c	(revision 37443)
@@ -78,7 +78,7 @@
     av_fast_malloc(&vf->priv->outbuffer, &vf->priv->outbuffer_size, d_width * d_height * 3 * 2);
     if (!vf->priv->avctx) {
         vf->priv->avctx = avcodec_alloc_context3(NULL);
-        vf->priv->avctx->pix_fmt = PIX_FMT_RGB24;
+        vf->priv->avctx->pix_fmt = AV_PIX_FMT_RGB24;
         vf->priv->avctx->width = d_width;
         vf->priv->avctx->height = d_height;
         vf->priv->avctx->compression_level = 0;
Index: libmpcodecs/ve_lavc.c
===================================================================
--- libmpcodecs/ve_lavc.c	(revision 37442)
+++ libmpcodecs/ve_lavc.c	(revision 37443)
@@ -587,7 +587,7 @@
 
     mux_v->imgfmt = lavc_param_format;
     lavc_venc_context->pix_fmt = imgfmt2pixfmt(lavc_param_format);
-    if (lavc_venc_context->pix_fmt == PIX_FMT_NONE)
+    if (lavc_venc_context->pix_fmt == AV_PIX_FMT_NONE)
         return 0;
 
     if(!stats_file) {
Index: libmpcodecs/vf_zrmjpeg.c
===================================================================
--- libmpcodecs/vf_zrmjpeg.c	(revision 37442)
+++ libmpcodecs/vf_zrmjpeg.c	(revision 37443)
@@ -495,7 +495,7 @@
 	j->s->avctx->dct_algo = FF_DCT_AUTO;
 	j->s->intra_quant_bias= 1<<(QUANT_BIAS_SHIFT-1); //(a + x/2)/x
 	// indicate we 'decode' to jpeg 4:2:2
-	j->s->avctx->pix_fmt = PIX_FMT_YUVJ422P;
+	j->s->avctx->pix_fmt = AV_PIX_FMT_YUVJ422P;
 
 	j->s->avctx->thread_count = 1;
 
Index: libmpcodecs/vf_mcdeint.c
===================================================================
--- libmpcodecs/vf_mcdeint.c	(revision 37442)
+++ libmpcodecs/vf_mcdeint.c	(revision 37443)
@@ -225,7 +225,7 @@
             avctx_enc->time_base= (AVRational){1,25};  // meaningless
             avctx_enc->gop_size = 300;
             avctx_enc->max_b_frames= 0;
-            avctx_enc->pix_fmt = PIX_FMT_YUV420P;
+            avctx_enc->pix_fmt = AV_PIX_FMT_YUV420P;
             avctx_enc->flags = CODEC_FLAG_QSCALE | CODEC_FLAG_LOW_DELAY;
             avctx_enc->strict_std_compliance = FF_COMPLIANCE_EXPERIMENTAL;
             avctx_enc->global_quality= 1;
Index: libmpcodecs/vf_scale.c
===================================================================
--- libmpcodecs/vf_scale.c	(revision 37442)
+++ libmpcodecs/vf_scale.c	(revision 37443)
@@ -220,7 +220,7 @@
         return 0;
     }
     sfmt = imgfmt2pixfmt(outfmt);
-    if (outfmt == IMGFMT_BGR8) sfmt = PIX_FMT_PAL8;
+    if (outfmt == IMGFMT_BGR8) sfmt = AV_PIX_FMT_PAL8;
     dfmt = imgfmt2pixfmt(best);
 
     vo_flags=vf->next->query_format(vf->next,best);
@@ -544,7 +544,7 @@
 //  supported Input formats: YV12, I420, IYUV, YUY2, UYVY, BGR32, BGR24, BGR16, BGR15, RGB32, RGB24, Y8, Y800
 
 static int query_format(struct vf_instance *vf, unsigned int fmt){
-    if (!IMGFMT_IS_HWACCEL(fmt) && imgfmt2pixfmt(fmt) != PIX_FMT_NONE) {
+    if (!IMGFMT_IS_HWACCEL(fmt) && imgfmt2pixfmt(fmt) != AV_PIX_FMT_NONE) {
         unsigned int best=find_best_out(vf, fmt);
         int flags;
         if(!best) return 0;         // no matching out-fmt
@@ -646,7 +646,7 @@
 
         dfmt = imgfmt2pixfmt(dstFormat);
         sfmt = imgfmt2pixfmt(srcFormat);
-        if (srcFormat == IMGFMT_RGB8 || srcFormat == IMGFMT_BGR8) sfmt = PIX_FMT_PAL8;
+        if (srcFormat == IMGFMT_RGB8 || srcFormat == IMGFMT_BGR8) sfmt = AV_PIX_FMT_PAL8;
         sws_getFlagsAndFilterFromCmdLine(&flags, &srcFilterParam, &dstFilterParam);
 
         return sws_getContext(srcW, srcH, sfmt, dstW, dstH, dfmt, flags, srcFilterParam, dstFilterParam, NULL);
Index: libmpcodecs/vf_sab.c
===================================================================
--- libmpcodecs/vf_sab.c	(revision 37442)
+++ libmpcodecs/vf_sab.c	(revision 37443)
@@ -105,7 +105,7 @@
     swsF.lumH= swsF.lumV= vec;
     swsF.chrH= swsF.chrV= NULL;
     f->preFilterContext= sws_getContext(
-        width, height, PIX_FMT_GRAY8, width, height, PIX_FMT_GRAY8, SWS_POINT, &swsF, NULL, NULL);
+        width, height, AV_PIX_FMT_GRAY8, width, height, AV_PIX_FMT_GRAY8, SWS_POINT, &swsF, NULL, NULL);
 
     sws_freeVec(vec);
     vec = sws_getGaussianVec(f->strength, 5.0);
Index: libmpcodecs/vf_smartblur.c
===================================================================
--- libmpcodecs/vf_smartblur.c	(revision 37442)
+++ libmpcodecs/vf_smartblur.c	(revision 37443)
@@ -89,7 +89,7 @@
     swsF.lumH= swsF.lumV= vec;
     swsF.chrH= swsF.chrV= NULL;
     f->filterContext= sws_getContext(
-        width, height, PIX_FMT_GRAY8, width, height, PIX_FMT_GRAY8, SWS_BICUBIC, &swsF, NULL, NULL);
+        width, height, AV_PIX_FMT_GRAY8, width, height, AV_PIX_FMT_GRAY8, SWS_BICUBIC, &swsF, NULL, NULL);
 
     sws_freeVec(vec);
 
Index: libmpcodecs/vf_uspp.c
===================================================================
--- libmpcodecs/vf_uspp.c	(revision 37442)
+++ libmpcodecs/vf_uspp.c	(revision 37443)
@@ -234,7 +234,7 @@
             avctx_enc->time_base= (AVRational){1,25};  // meaningless
             avctx_enc->gop_size = 300;
             avctx_enc->max_b_frames= 0;
-            avctx_enc->pix_fmt = PIX_FMT_YUV420P;
+            avctx_enc->pix_fmt = AV_PIX_FMT_YUV420P;
             avctx_enc->flags = CODEC_FLAG_QSCALE | CODEC_FLAG_LOW_DELAY;
             avctx_enc->strict_std_compliance = FF_COMPLIANCE_EXPERIMENTAL;
             avctx_enc->global_quality= 123;
Index: libmpcodecs/vf_halfpack.c
===================================================================
--- libmpcodecs/vf_halfpack.c	(revision 37442)
+++ libmpcodecs/vf_halfpack.c	(revision 37443)
@@ -198,8 +198,8 @@
 		sws_freeContext(vf->priv->ctx);
 		// get unscaled 422p -> yuy2 conversion
 		vf->priv->ctx =
-			sws_getContext(width, height / 2, PIX_FMT_YUV422P,
-			               width, height / 2, PIX_FMT_YUYV422,
+			sws_getContext(width, height / 2, AV_PIX_FMT_YUV422P,
+			               width, height / 2, AV_PIX_FMT_YUYV422,
 			               SWS_POINT | SWS_PRINT_INFO,
 			               NULL, NULL, NULL);
 	}
Index: libmpcodecs/vf_lavc.c
===================================================================
--- libmpcodecs/vf_lavc.c	(revision 37442)
+++ libmpcodecs/vf_lavc.c	(revision 37443)
@@ -161,7 +161,7 @@
     lavc_venc_context.time_base.num = 1000*1001;
     lavc_venc_context.time_base.den = (p_fps<1.0) ? 1000*1001*25 : (p_fps * lavc_venc_context.time_base.num);
     lavc_venc_context.gop_size = 0; // I-only
-    lavc_venc_context.pix_fmt= PIX_FMT_YUV420P;
+    lavc_venc_context.pix_fmt= AV_PIX_FMT_YUV420P;
 
     return 1;
 }
Index: gui/util/bitmap.c
===================================================================
--- gui/util/bitmap.c	(revision 37442)
+++ gui/util/bitmap.c	(revision 37443)
@@ -134,19 +134,19 @@
     memset(img, 0, sizeof(*img));
 
     switch (avctx->pix_fmt) {
-    case PIX_FMT_GRAY8:
+    case AV_PIX_FMT_GRAY8:
         img->Bpp = 8;
         break;
 
-    case PIX_FMT_GRAY16BE:
+    case AV_PIX_FMT_GRAY16BE:
         img->Bpp = 16;
         break;
 
-    case PIX_FMT_RGB24:
+    case AV_PIX_FMT_RGB24:
         img->Bpp = 24;
         break;
 
-    case PIX_FMT_RGBA:
+    case AV_PIX_FMT_RGBA:
         img->Bpp = 32;
         break;
 
Index: gui/win32/skinload.c
===================================================================
--- gui/win32/skinload.c	(revision 37442)
+++ gui/win32/skinload.c	(revision 37443)
@@ -185,12 +185,12 @@
       int src_stride[4] = { 4 * bmp.Width, 0, 0, 0 };
       uint8_t *dst[4] = { NULL, NULL, NULL, NULL };
       int dst_stride[4];
-      enum AVPixelFormat out_pix_fmt = PIX_FMT_NONE;
+      enum AVPixelFormat out_pix_fmt = AV_PIX_FMT_NONE;
       struct SwsContext *sws;
-      if      (skin->desktopbpp == 16) out_pix_fmt = PIX_FMT_RGB555;
-      else if (skin->desktopbpp == 24) out_pix_fmt = PIX_FMT_RGB24;
+      if      (skin->desktopbpp == 16) out_pix_fmt = AV_PIX_FMT_RGB555;
+      else if (skin->desktopbpp == 24) out_pix_fmt = AV_PIX_FMT_RGB24;
       av_image_fill_linesizes(dst_stride, out_pix_fmt, bmp.Width);
-      sws = sws_getContext(bmp.Width, bmp.Height, PIX_FMT_RGB32,
+      sws = sws_getContext(bmp.Width, bmp.Height, AV_PIX_FMT_RGB32,
                            bmp.Width, bmp.Height, out_pix_fmt,
                            SWS_POINT, NULL, NULL, NULL);
       bf->data = malloc(bf->size);
Index: gui/wm/ws.c
===================================================================
--- gui/wm/ws.c	(revision 37442)
+++ gui/wm/ws.c	(revision 37443)
@@ -79,7 +79,7 @@
 static int wsUseXShm   = True;
 static int wsUseXShape = True;
 
-static enum AVPixelFormat out_pix_fmt = PIX_FMT_NONE;
+static enum AVPixelFormat out_pix_fmt = AV_PIX_FMT_NONE;
 
 /* --- */
 
@@ -275,21 +275,21 @@
 #endif
 
     if (wsScreenDepth == 32 && wsRedMask == 0xff0000 && wsGreenMask == 0x00ff00 && wsBlueMask == 0x0000ff)
-        out_pix_fmt = PIX_FMT_RGB32;
+        out_pix_fmt = AV_PIX_FMT_RGB32;
     else if (wsScreenDepth == 32 && wsRedMask == 0x0000ff && wsGreenMask == 0x00ff00 && wsBlueMask == 0xff0000)
-        out_pix_fmt = PIX_FMT_BGR32;
+        out_pix_fmt = AV_PIX_FMT_BGR32;
     else if (wsScreenDepth == 24 && wsRedMask == 0xff0000 && wsGreenMask == 0x00ff00 && wsBlueMask == 0x0000ff)
-        out_pix_fmt = PIX_FMT_RGB24;
+        out_pix_fmt = AV_PIX_FMT_RGB24;
     else if (wsScreenDepth == 24 && wsRedMask == 0x0000ff && wsGreenMask == 0x00ff00 && wsBlueMask == 0xff0000)
-        out_pix_fmt = PIX_FMT_BGR24;
+        out_pix_fmt = AV_PIX_FMT_BGR24;
     else if (wsScreenDepth == 16 && wsRedMask == 0xf800 && wsGreenMask == 0x7e0 && wsBlueMask == 0x1f)
-        out_pix_fmt = PIX_FMT_RGB565;
+        out_pix_fmt = AV_PIX_FMT_RGB565;
     else if (wsScreenDepth == 16 && wsRedMask == 0x1f && wsGreenMask == 0x7e0 && wsBlueMask == 0xf800)
-        out_pix_fmt = PIX_FMT_BGR565;
+        out_pix_fmt = AV_PIX_FMT_BGR565;
     else if (wsScreenDepth == 15 && wsRedMask == 0x7c00 && wsGreenMask == 0x3e0 && wsBlueMask == 0x1f)
-        out_pix_fmt = PIX_FMT_RGB555;
+        out_pix_fmt = AV_PIX_FMT_RGB555;
     else if (wsScreenDepth == 15 && wsRedMask == 0x1f && wsGreenMask == 0x3e0 && wsBlueMask == 0x7c00)
-        out_pix_fmt = PIX_FMT_BGR555;
+        out_pix_fmt = AV_PIX_FMT_BGR555;
 }
 
 void wsDone(void)
@@ -1049,29 +1049,29 @@
     int color = 0;
 
     switch (out_pix_fmt) {
-    case PIX_FMT_RGB32:
-    case PIX_FMT_RGB24:
+    case AV_PIX_FMT_RGB32:
+    case AV_PIX_FMT_RGB24:
         color = (r << 16) + (g << 8) + b;
         break;
 
-    case PIX_FMT_BGR32:
-    case PIX_FMT_BGR24:
+    case AV_PIX_FMT_BGR32:
+    case AV_PIX_FMT_BGR24:
         color = (b << 16) + (g << 8) + r;
         break;
 
-    case PIX_FMT_RGB565:
+    case AV_PIX_FMT_RGB565:
         color = pack_rgb16(r, g, b);
         break;
 
-    case PIX_FMT_BGR565:
+    case AV_PIX_FMT_BGR565:
         color = pack_rgb16(b, g, r);
         break;
 
-    case PIX_FMT_RGB555:
+    case AV_PIX_FMT_RGB555:
         color = pack_rgb15(r, g, b);
         break;
 
-    case PIX_FMT_BGR555:
+    case AV_PIX_FMT_BGR555:
         color = pack_rgb15(b, g, r);
         break;
 
@@ -1367,7 +1367,7 @@
     int dst_stride[4];
     int i;
 
-    sws_ctx = sws_getCachedContext(sws_ctx, win->xImage->width, win->xImage->height, PIX_FMT_RGB32,
+    sws_ctx = sws_getCachedContext(sws_ctx, win->xImage->width, win->xImage->height, AV_PIX_FMT_RGB32,
                                    win->xImage->width, win->xImage->height, out_pix_fmt,
                                    SWS_POINT, NULL, NULL, NULL);
     av_image_fill_linesizes(dst_stride, out_pix_fmt, win->xImage->width);
Index: sub/spudec.c
===================================================================
--- sub/spudec.c	(revision 37442)
+++ sub/spudec.c	(revision 37443)
@@ -891,7 +891,7 @@
 		oldvar = spu_gaussvar;
 	}
 
-	ctx=sws_getContext(sw, sh, PIX_FMT_GRAY8, dw, dh, PIX_FMT_GRAY8, SWS_GAUSS, &filter, NULL, NULL);
+	ctx=sws_getContext(sw, sh, AV_PIX_FMT_GRAY8, dw, dh, AV_PIX_FMT_GRAY8, SWS_GAUSS, &filter, NULL, NULL);
 	sws_scale(ctx,&s1,&ss,0,sh,&d1,&ds);
 	for (i=ss*sh-1; i>=0; i--) s2[i] = -s2[i];
 	sws_scale(ctx,&s2,&ss,0,sh,&d2,&ds);
Index: fmt-conversion.c
===================================================================
--- fmt-conversion.c	(revision 37442)
+++ fmt-conversion.c	(revision 37443)
@@ -155,7 +155,7 @@
         if (conversion_map[i].fmt == fmt)
             break;
     pix_fmt = conversion_map[i].pix_fmt;
-    if (pix_fmt == PIX_FMT_NONE)
+    if (pix_fmt == AV_PIX_FMT_NONE)
         mp_msg(MSGT_GLOBAL, MSGL_ERR, "Unsupported format %s\n", vo_format_name(fmt));
     return pix_fmt;
 }
@@ -164,7 +164,7 @@
 {
     int i;
     int fmt;
-    for (i = 0; conversion_map[i].pix_fmt != PIX_FMT_NONE; i++)
+    for (i = 0; conversion_map[i].pix_fmt != AV_PIX_FMT_NONE; i++)
         if (conversion_map[i].pix_fmt == pix_fmt)
             break;
     fmt = conversion_map[i].fmt;
Index: libmpdemux/demux_lavf.c
===================================================================
--- libmpdemux/demux_lavf.c	(revision 37442)
+++ libmpdemux/demux_lavf.c	(revision 37443)
@@ -364,10 +364,10 @@
 
             if (codec->codec_id == AV_CODEC_ID_RAWVIDEO) {
                 switch (codec->pix_fmt) {
-                    case PIX_FMT_RGB24:
+                    case AV_PIX_FMT_RGB24:
                         codec->codec_tag= MKTAG(24, 'B', 'G', 'R');
                         break;
-                    case PIX_FMT_BGR24:
+                    case AV_PIX_FMT_BGR24:
                         codec->codec_tag= MKTAG(24, 'R', 'G', 'B');
                         break;
                 }
