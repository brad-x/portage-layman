--- a/configure.ac
+++ b/configure.ac
@@ -51,10 +51,10 @@
 			  forking        use the REALLY SUCKY forking resolver.
 			  guess          run experiments to guess a
 					 reasonable value.  Only works if you
-					 aren't cross-compiling.  This
+					 are not cross-compiling.  This
 					 is the default.  guess will
 					 either select netdb or netdb_1thread.
-			  none           don't do name resolution.],
+			  none           do not do name resolution.],
     [resolver=$withval],
     [resolver=guess])
 
@@ -132,7 +132,7 @@
 dnl
 dnl This is complicated because we need some sort of reentrant mechanism for
 dnl name resolution. Naturally, UNIX vendors have come up with a variety of
-dnl incompatible schemes for this, many of which don't work at all.
+dnl incompatible schemes for this, many of which do not work at all.
 dnl
 
 dnl First, the default resolver, which uses getnameinfo or gethostbyaddr_r. If
@@ -148,7 +148,7 @@
     use_getnameinfo=0
     AC_SEARCH_LIBS(getnameinfo, [nsl], [use_getnameinfo=1])
 
-    dnl XXX For the moment, don't use getnameinfo, since it isn't actually
+    dnl XXX For the moment, do not use getnameinfo, since it is not actually
     dnl thread safe on, e.g., NetBSD.
     use_getnameinfo=0
 
@@ -165,7 +165,7 @@
     dnl Can use gethostbyaddr_r?
     AC_SEARCH_LIBS(gethostbyaddr_r, [nsl], , [resolver=guess])
     if test x$resolver = xguess && test x$specified_resolver != xguess ; then
-       dnl They wanted gethostbyaddr_r, but they can't have it, so stop.
+       dnl They wanted gethostbyaddr_r, but they cannot have it, so stop.
        AC_MSG_ERROR([no library defines gethostbyaddr_r])
     fi
 fi
@@ -189,15 +189,15 @@
 	            AC_DEFINE(GETHOSTBYADDR_R_RETURNS_INT, 1,
                     [8-argument gethostbyaddr_r returns int])], [
     dnl Neither.
-    AC_MSG_RESULT([don't know how])
+    AC_MSG_RESULT([do not know how])
     resolver=guess])])
     if test x$resolver = xguess && test x$specified_resolver != xguess ; then
-       dnl They wanted gethostbyaddr_r, but they can't have it, so stop.
+       dnl They wanted gethostbyaddr_r, but they cannot have it, so stop.
        AC_MSG_ERROR([gethostbyaddr_r has no known calling convention])
     fi
 fi
 
-dnl If we still want to do gethostbyaddr_r, and we aren't
+dnl If we still want to do gethostbyaddr_r, and we are not
 dnl cross-compiling, test it.
 if test x$resolver = xnetdb ; then
     if test x$ghba_args = x8 ; then
@@ -210,13 +210,13 @@
                   [AC_MSG_RESULT([yes])],
 		  [AC_MSG_RESULT([no])
 		   resolver=guess],
-		  [AC_MSG_RESULT([can't test because we are cross-compiling])])
+		  [AC_MSG_RESULT([cannot test because we are cross-compiling])])
     if test x$resolver = xguess ; then
         if test x$specified_resolver = xguess ; then
-           AC_MSG_RESULT([gethostbyaddr_r doesn't work, so we'll try something else])
+           AC_MSG_RESULT([gethostbyaddr_r does not work, so we will try something else])
         else
-           dnl They wanted gethostbyaddr_r, but it doesn't work, so stop.
-           AC_MSG_ERROR([gethostbyaddr_r doesn't work])
+           dnl They wanted gethostbyaddr_r, but it does not work, so stop.
+           AC_MSG_ERROR([gethostbyaddr_r does not work])
         fi
     fi
 fi
@@ -233,11 +233,11 @@
     AC_SEARCH_LIBS(ares_init, [ares], [
         AC_DEFINE(USE_ARES, 1, [use ARES for name resolution])
         ], [
-        dnl They asked for ares, but we can't give it to them, so stop.
-        AC_MSG_ERROR([can't find ARES.  Re-run configure and ask for a different resolver.])])
+        dnl They asked for ares, but we cannot give it to them, so stop.
+        AC_MSG_ERROR([cannot find ARES.  Re-run configure and ask for a different resolver.])])
 fi
 
-dnl Last thing to try if we haven't decided yet is netdb_1thread.
+dnl Last thing to try if we have not decided yet is netdb_1thread.
 if test x$resolver = xguess ; then
    resolver=netdb_1thread
 fi
@@ -290,16 +290,16 @@
 
 if test $foundpcaph = 0 ; then
     AC_MSG_RESULT([no idea])
-    AC_MSG_ERROR([can't find pcap.h
-  You're not going to get very far without libpcap.])
+    AC_MSG_ERROR([cannot find pcap.h
+  You are not going to get very far without libpcap.])
 else
     dnl assume that -lpcap is under $test_prefix/lib
     if test x$test_prefix != x ; then
         LDFLAGS="$LDFLAGS -L$test_prefix/lib"
     fi
     AC_CHECK_LIB(pcap, pcap_open_live, , [
-            AC_MSG_ERROR([can't find libpcap
-  You're not going to get very far without libpcap.])
+            AC_MSG_ERROR([cannot find libpcap
+  You are not going to get very far without libpcap.])
         ])
 fi
 
@@ -310,14 +310,14 @@
     ])
 
 if test $foundpcap = 0 ; then
-    AC_MSG_ERROR([can't find pcap.h
-  You're not going to get very far without libpcap.])
+    AC_MSG_ERROR([cannot find pcap.h
+  You are not going to get very far without libpcap.])
 fi
 
 dnl
 dnl Curses. Really, we need ncurses or something similarly advanced, since
 dnl we use the (apparently obscure) mvchgat function. Unfortunately, there's
-dnl a solid chance that mvchgat is a macro, so we can't just use
+dnl a solid chance that mvchgat is a macro, so we cannot just use
 dnl AC_SEARCH_LIBS....
 dnl
 
@@ -338,7 +338,7 @@
     done
 	],
     AC_MSG_ERROR([Curses! Foiled again!
-  (Can't find a curses library supporting mvchgat.)
+  (Cannot find a curses library supporting mvchgat.)
   Consider installing ncurses.])
 	)
 ])
