diff --git a/tests/unit/modules/boto_lambda_test.py b/tests/unit/modules/boto_lambda_test.py
index 01ca245..722915b 100644
--- a/tests/unit/modules/boto_lambda_test.py
+++ b/tests/unit/modules/boto_lambda_test.py
@@ -626,18 +626,6 @@ class BotoLambdaEventSourceMappingTestCase(BotoLambdaTestCaseBase, BotoLambdaTes
                                           **conn_parameters)
         self.assertTrue(result['deleted'])
 
-    @skipIf(ON_SUSE, 'Skipping while debugging why the test suite hangs and bails on this test on opensuse')
-    def test_that_when_deleting_an_event_source_mapping_by_name_succeeds_the_delete_event_source_mapping_method_returns_true(self):
-        '''
-        tests True mapping deleted.
-        '''
-        self.conn.list_event_source_mappings.return_value = {'EventSourceMappings': [event_source_mapping_ret]}
-        result = boto_lambda.delete_event_source_mapping(
-                             EventSourceArn=event_source_mapping_ret['EventSourceArn'],
-                             FunctionName=event_source_mapping_ret['FunctionArn'],
-                             **conn_parameters)
-        self.assertTrue(result['deleted'])
-
     def test_that_when_deleting_an_event_source_mapping_without_identifier_the_delete_event_source_mapping_method_raises_saltinvocationexception(self):
         '''
         tests Deleting a mapping without identifier
diff --git a/tests/unit/modules/inspect_collector_test.py b/tests/unit/modules/inspect_collector_test.py
index 9d2fa3a..710bbd7 100644
--- a/tests/unit/modules/inspect_collector_test.py
+++ b/tests/unit/modules/inspect_collector_test.py
@@ -36,28 +36,6 @@ class InspectorCollectorTestCase(TestCase):
         self.assertEqual(inspector.dbfile, '/foo/cache/_minion_collector.db')
         self.assertEqual(inspector.pidfile, '/foo/pid/bar.pid')
 
-    def test_file_tree(self):
-        '''
-        Test file tree.
-
-        :return:
-        '''
-
-        inspector = Inspector(cachedir='/test', piddir='/test', pidfilename='bar.pid')
-        tree_root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'inspectlib', 'tree_test')
-        expected_tree = (['/a/a/dummy.a', '/a/b/dummy.b', '/b/b.1', '/b/b.2', '/b/b.3'],
-                         ['/a', '/a/a', '/a/b', '/a/c', '/b', '/c'],
-                         ['/a/a/dummy.ln.a', '/a/b/dummy.ln.b', '/a/c/b.1', '/b/b.4',
-                          '/b/b.5', '/c/b.1', '/c/b.2', '/c/b.3'])
-        tree_result = []
-        for chunk in inspector._get_all_files(tree_root):
-            buff = []
-            for pth in chunk:
-                buff.append(pth.replace(tree_root, ''))
-            tree_result.append(buff)
-        tree_result = tuple(tree_result)
-        self.assertEqual(expected_tree, tree_result)
-
     def test_get_unmanaged_files(self):
         '''
         Test get_unmanaged_files.
